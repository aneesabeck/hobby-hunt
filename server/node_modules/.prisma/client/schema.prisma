// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int            @id @default(autoincrement())
  username        String         @unique
  hashedPassword  String
  firstname       String
  lastname        String
  bio             String         @default("")
  pronouns        String         @default("")
  pfp             String?
  interests       String[]
  hobbyId         Int?
  hobby           Hobby?         @relation(fields: [hobbyId], references: [id])
  posts           Post[]
  likedPosts      Int[]
  comments        Comments[]
  notifications   Notification[]
  backgroundColor String?
}

model Hobby {
  id        Int    @id @default(autoincrement())
  name      String @unique
  users     User[]
  interests String
  posts     Post[]
  api       String @default("")
}

model Post {
  id        Int        @id @default(autoincrement())
  imgUrl    String
  caption   String
  hobby     Hobby      @relation(fields: [hobbyId], references: [id], onDelete: Cascade)
  hobbyId   Int
  likes     Int        @default(0)
  comments  Comments[]
  user      User       @relation(fields: [username], references: [username], onDelete: Cascade)
  username  String
  createdAt DateTime   @default(now())
}

model Comments {
  id       Int    @id @default(autoincrement())
  post     Post   @relation(fields: [postId], references: [id])
  postId   Int
  text     String
  user     User   @relation(fields: [username], references: [username], onDelete: Cascade)
  username String
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  message   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
}
